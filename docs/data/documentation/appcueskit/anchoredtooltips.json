{"identifier":{"url":"doc:\/\/com.appcues.sdk\/documentation\/AppcuesKit\/AnchoredTooltips","interfaceLanguage":"swift"},"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/appcueskit\/anchoredtooltips"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"seeAlsoSections":[{"title":"Core Functionality","identifiers":["doc:\/\/com.appcues.sdk\/documentation\/AppcuesKit\/GettingStarted","doc:\/\/com.appcues.sdk\/documentation\/AppcuesKit\/Identifying","doc:\/\/com.appcues.sdk\/documentation\/AppcuesKit\/Tracking","doc:\/\/com.appcues.sdk\/documentation\/AppcuesKit\/URLSchemeConfiguring","doc:\/\/com.appcues.sdk\/documentation\/AppcuesKit\/Appcues"],"generated":true}],"hierarchy":{"paths":[["doc:\/\/com.appcues.sdk\/documentation\/AppcuesKit"]]},"sections":[],"abstract":[{"text":"The Appcues iOS SDK supports anchored tooltips targeting views built with ","type":"text"},{"type":"codeVoice","code":"UIKit"},{"text":" or ","type":"text"},{"code":"SwiftUI","type":"codeVoice"},{"type":"text","text":"."}],"metadata":{"modules":[{"name":"AppcuesKit"}],"role":"article","roleHeading":"Article","title":"Configuring Views for Anchored Tooltips"},"primaryContentSections":[{"content":[{"anchor":"overview","text":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Instrumenting your application views as described below allows the Appcues iOS SDK to create a mobile view selector. This selector is used by the Appcues Mobile Builder to create and target anchored tooltips. When a user qualifies for a flow, this selector is used to render the anchored tooltip content in the correct location.","type":"text"}]},{"text":"Instrumenting UIKit Views","anchor":"Instrumenting-UIKit-Views","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following "},{"type":"codeVoice","code":"UIView"},{"text":" properties are used to identify elements, in order of precedence:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/uikit\/uiaccessibilityidentification\/1623132-accessibilityidentifier","type":"reference"},{"text":" - commonly used for Xcode UI testing, and generally a good practice to include on core views in the application to help identify.","type":"text"}]}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/developer.apple.com\/documentation\/uikit\/uiview\/1622493-tag","isActive":true,"type":"reference"},{"text":" - an integer value that can be used to identify view objects in your application.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/objectivec\/nsobject\/1615181-accessibilitylabel","type":"reference"},{"type":"text","text":" - a property used in assistive applications, such as VoiceOver, to convey information to users with disabilities, to help them use the app. In addition to being a good practice to use to support core accessibility features on iOS, it can also help with Appcues element targeting. It is considered a lower priority property for selector usage, however, due to the fact that the descriptive strings can often be non-unique throughout the application and they may also be localized to the user’s preferred language and not maintain consistency with the label used when the flow was built."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"At least one identifiable property must be set. Not all are required. The best way to ensure great performance of iOS anchored tooltips in Appcues is to set a unique "},{"type":"codeVoice","code":"accessibilityIdentifier"},{"type":"text","text":" on each "},{"type":"codeVoice","code":"UIView"},{"type":"text","text":" element that may be targeted."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"These properties are available on any UIView derived type, and can be set programmatically in Swift as follows:","type":"text"}]},{"syntax":"swift","code":["let button = UIButton()","button.accessibilityIdentifier = \"btnSaveProfile\"","button.accessibilityLabel = \"Save\"","button.tag = 1234"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"These properties are also available in Xcode Interface Builder, used for Storyboard UI development. Click on the view and select the Identity inspector tab to see the Accessibility section and set related properties. The "},{"code":"tag","type":"codeVoice"},{"type":"text","text":" is also visible to edit on the Attributes inspector. These properties can also be set using the User Defined Runtime Attributes section of the Identity inspector for a selected element in Interface Builder."}]},{"style":"tip","name":"Tip","content":[{"type":"paragraph","inlineContent":[{"text":"For the common use case of ","type":"text"},{"type":"codeVoice","code":"UITabBarController"},{"text":" and its associated ","type":"text"},{"type":"codeVoice","code":"UITabBar"},{"type":"text","text":" items, the Appcues iOS SDK will automatically generate index-based selectors for each item to use for targeting tooltips. No additional code is required in your application if you would like to target the items in a "},{"type":"codeVoice","code":"UITabBar"},{"type":"text","text":" in your application’s screen by index."}]}],"type":"aside"},{"level":2,"anchor":"Instrumenting-SwiftUI-Views","text":"Instrumenting SwiftUI Views","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"iOS Applications using SwiftUI can also identify "},{"type":"codeVoice","code":"View"},{"type":"text","text":" elements. A "},{"code":"View","type":"codeVoice"},{"text":" extension ","type":"text"},{"identifier":"doc:\/\/com.appcues.sdk\/documentation\/AppcuesKit\/SwiftUI\/View\/appcuesView(identifier:)","type":"reference","isActive":true},{"type":"text","text":" is provided by the Appcues iOS SDK to support this use case. The "},{"code":"identifier","type":"codeVoice"},{"text":" String value must be unique on the screen where an anchored tooltip may be targeted.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The following example shows how this would be added to a SwiftUI ","type":"text"},{"type":"codeVoice","code":"Button"},{"text":" View:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["Button(\"Save Profile\") {","    onSaveProfile()","}",".appcuesView(identifier: \"btnSaveProfile\")"]},{"level":2,"type":"heading","text":"Other Considerations","anchor":"Other-Considerations"},{"anchor":"Selector-Uniqueness","level":3,"type":"heading","text":"Selector Uniqueness"},{"inlineContent":[{"type":"text","text":"Ensure that view identifiers used for selectors are unique within the visible views on the screen at the time an anchored tooltip is attempting to render. If no unique match is found, the Appcues flow will terminate with an error. It is not required that selectors are globally unique across the application, but they must be on any given screen layout."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using multiple selector properties is another way to ensure uniqueness. For instance, if two views in a layout have the same "},{"type":"codeVoice","code":"accessibilityLabel"},{"text":", but different ","type":"text"},{"code":"accessibilityIdentifier","type":"codeVoice"},{"text":" values, a selector will be able to find the unique match by finding the element that matches both properties exactly.","type":"text"}]},{"level":3,"text":"Consistent View Identifiers","type":"heading","anchor":"Consistent-View-Identifiers"},{"inlineContent":[{"type":"text","text":"Maintain consistency with view identifiers as new versions of the app are released. For example, if a button was using an identifier like “Save Profile” in several versions of the application, then changed to “Save” - this would break the ability for selectors using “Save Profile” to be able to find that view and target a tooltip in the newer versions of the app. You could build multiple flows targeting different versions of the application, but it helps keep things simplest if consistent view identifiers can be maintained over time."}],"type":"paragraph"}],"kind":"content"}],"references":{"doc://com.appcues.sdk/documentation/AppcuesKit/SwiftUI/View/appcuesView(identifier:)":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"appcuesView","kind":"identifier"},{"text":"(","kind":"text"},{"text":"identifier","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":"?) -> "},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"View","preciseIdentifier":"s:7SwiftUI4ViewP","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Associates the view with an identifier for Appcues element targeting."}],"identifier":"doc:\/\/com.appcues.sdk\/documentation\/AppcuesKit\/SwiftUI\/View\/appcuesView(identifier:)","role":"symbol","title":"appcuesView(identifier:)","type":"topic","url":"\/documentation\/appcueskit\/swiftui\/view\/appcuesview(identifier:)","kind":"symbol"},"doc://com.appcues.sdk/documentation/AppcuesKit/Tracking":{"identifier":"doc:\/\/com.appcues.sdk\/documentation\/AppcuesKit\/Tracking","role":"article","abstract":[{"type":"text","text":"Events are the “actions” your users take in your application, which can be anything from clicking a certain button to viewing a specific screen."}],"kind":"article","type":"topic","title":"Tracking Screens and Events","url":"\/documentation\/appcueskit\/tracking"},"doc://com.appcues.sdk/documentation/AppcuesKit/URLSchemeConfiguring":{"url":"\/documentation\/appcueskit\/urlschemeconfiguring","role":"article","identifier":"doc:\/\/com.appcues.sdk\/documentation\/AppcuesKit\/URLSchemeConfiguring","title":"Configuring the Appcues URL Scheme","kind":"article","abstract":[{"type":"text","text":"The Appcues iOS SDK includes support for a custom URL scheme that supports previewing Appcues experiences in-app prior to publishing and launching the Appcues debugger."}],"type":"topic"},"doc://com.appcues.sdk/documentation/AppcuesKit/Appcues":{"navigatorTitle":[{"kind":"identifier","text":"Appcues"}],"title":"Appcues","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Appcues"}],"url":"\/documentation\/appcueskit\/appcues","role":"symbol","identifier":"doc:\/\/com.appcues.sdk\/documentation\/AppcuesKit\/Appcues","kind":"symbol","abstract":[{"type":"text","text":"An object that manages Appcues tracking and rendering of experience content, for your app."}]},"doc://com.appcues.sdk/documentation/AppcuesKit/Identifying":{"title":"Identifying and Managing Users","identifier":"doc:\/\/com.appcues.sdk\/documentation\/AppcuesKit\/Identifying","url":"\/documentation\/appcueskit\/identifying","abstract":[{"text":"In order to target content to the right users at the right time, you need to identify users and send Appcues data about them.","type":"text"}],"kind":"article","type":"topic","role":"article"},"https://developer.apple.com/documentation/uikit/uiaccessibilityidentification/1623132-accessibilityidentifier":{"type":"link","titleInlineContent":[{"code":"accessibilityIdentifier","type":"codeVoice"}],"identifier":"https:\/\/developer.apple.com\/documentation\/uikit\/uiaccessibilityidentification\/1623132-accessibilityidentifier","title":"accessibilityIdentifier","url":"https:\/\/developer.apple.com\/documentation\/uikit\/uiaccessibilityidentification\/1623132-accessibilityidentifier"},"doc://com.appcues.sdk/documentation/AppcuesKit":{"role":"collection","identifier":"doc:\/\/com.appcues.sdk\/documentation\/AppcuesKit","title":"AppcuesKit","kind":"symbol","abstract":[{"type":"text","text":"Appcues iOS SDK allows you to integrate Appcues experiences into your native iOS and iPadOS apps."}],"type":"topic","url":"\/documentation\/appcueskit"},"https://developer.apple.com/documentation/objectivec/nsobject/1615181-accessibilitylabel":{"title":"accessibilityLabel","url":"https:\/\/developer.apple.com\/documentation\/objectivec\/nsobject\/1615181-accessibilitylabel","identifier":"https:\/\/developer.apple.com\/documentation\/objectivec\/nsobject\/1615181-accessibilitylabel","type":"link","titleInlineContent":[{"type":"codeVoice","code":"accessibilityLabel"}]},"https://developer.apple.com/documentation/uikit/uiview/1622493-tag":{"type":"link","titleInlineContent":[{"code":"tag","type":"codeVoice"}],"identifier":"https:\/\/developer.apple.com\/documentation\/uikit\/uiview\/1622493-tag","title":"tag","url":"https:\/\/developer.apple.com\/documentation\/uikit\/uiview\/1622493-tag"},"doc://com.appcues.sdk/documentation/AppcuesKit/GettingStarted":{"url":"\/documentation\/appcueskit\/gettingstarted","role":"article","identifier":"doc:\/\/com.appcues.sdk\/documentation\/AppcuesKit\/GettingStarted","title":"Getting Started with Appcues iOS SDK","kind":"article","abstract":[{"type":"text","text":"Initialize the SDK and track events."}],"type":"topic"}}}