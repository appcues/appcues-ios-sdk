version: 2.1

# -------------------------
#       PARAMETERS
# -------------------------
parameters:
  deploy-beta:
    type: boolean
    default: false

# -------------------------
#          ORBS
# -------------------------
orbs:
  slack: circleci/slack@4.4.4
  codecov: codecov/codecov@3.2.5

# -------------------------
#        EXECUTORS
# -------------------------
executors:
  xcode_15:
    macos:
      xcode: 15.1.0
    resource_class: macos.m1.medium.gen1
    working_directory: /Users/distiller/project
    shell: /bin/bash --login -o pipefail
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1

# -------------------------
#        REFERENCES
# -------------------------
references:
  is_main: &is_main
    matches:
      pattern: '^main$'
      value: << pipeline.git.branch >>

# -------------------------
#          COMMANDS
# -------------------------
commands:
  install_with_cache:
    description: 'Checkout from git and install gem and mint dependencies'
    steps:
      - checkout
      - restore_cache:
          name: Restore gem cache
          key: 3-gems-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install gem dependencies
          command: bundle check || bundle install --deployment --path vendor/bundle
      - save_cache:
          name: Save gem cache
          key: 3-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: Install mint (Swift dependency manager)
          command: brew install mint
      - restore_cache:
          name: Restore swift build package cache
          key: 6-mint-{{ checksum "Mintfile" }}
      - run:
          name: Install swift build packages
          command: mint bootstrap
          # can be slow building swiftlint
          no_output_timeout: 30m
      - save_cache:
          name: Save swift build package cache
          key: 6-mint-{{ checksum "Mintfile" }}
          paths:
            - ~/.mint

# -------------------------
#          JOBS
# -------------------------
jobs:
  additional-branch-validation:
    executor: xcode_15
    steps:
      - install_with_cache
      - run:
          name: Compile example apps
          command: bundle exec fastlane compile_examples
      - slack/notify:
          event: fail
          template: basic_fail_1
          channel: team-mobile-bots
  deploy_example:
    executor: xcode_15
    steps:
      - install_with_cache
      - run:
          name: Run beta build
          command: bundle exec fastlane beta_example
      - slack/notify:
          event: fail
          template: basic_fail_1
          channel: team-mobile-bots
      - run:
          # some ideas from https://discuss.circleci.com/t/leveraging-circleci-api-to-include-build-logs-in-slack-notifications/39111
          name: Get changelog
          # 1) get the formatted changelong output; 2) find the lines that are actually the changelog; 3) format for JSON encoding; 4) remove the quotes that jq adds
          command: |
            APPCUES_SAMPLE_CHANGELOG=$(bundle exec fastlane run changelog_from_git_commits commits_count:5 pretty:"- [%as] %s" | grep "^-" -m 5 | jq -aRs . | sed -e 's/^"//' -e 's/"$//')
            echo $APPCUES_SAMPLE_CHANGELOG
            echo "export APPCUES_SAMPLE_CHANGELOG='${APPCUES_SAMPLE_CHANGELOG}'" >> $BASH_ENV
      - slack/notify:
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "ðŸš€ iOS Sample App Deployed to TestFlight ðŸ“²",
                    "emoji": true
                  }
                }
              ],
              "attachments": [
                {
                  "color": "#5C5CFF",
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "plain_text",
                        "text": "$APPCUES_SAMPLE_CHANGELOG",
                        "emoji": true
                      }
                    },
                    {
                      "type": "actions",
                      "elements": [
                        {
                          "type": "button",
                          "text": {
                            "type": "plain_text",
                            "text": "View Job",
                            "emoji": true
                          },
                          "url": "$CIRCLE_BUILD_URL"
                        },
                        {
                          "type": "button",
                          "text": {
                            "type": "plain_text",
                            "text": "View in TestFlight",
                            "emoji": true
                          },
                          "url": "https://testflight.apple.com/v1/app/1590866976"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          channel: team-mobile-bots
  trigger-spec-test-pipeline:
      docker: 
        - image: cimg/base:current
      resource_class: small
      steps:
        - run:
            name: Trigger spec pipeline
            # If there's a spec repo branch with the same name as the one currently executing,
            # trigger against that as a means to allow coordinated test updates.
            # If we get `{ "message" : "Branch not found" }`, fall back to running on `main`.
            command: |
              REMOTE_BRANCH=$CIRCLE_BRANCH

              create_remote_pipeline () {
                echo "Try remote job for $REMOTE_BRANCH"
                CREATED_PIPELINE_ID=$(curl --request POST \
                  --url https://circleci.com/api/v2/project/github/appcues/appcues-mobile-experience-spec/pipeline \
                  --header "Circle-Token: $CIRCLE_API_TOKEN" \
                  --header "content-type: application/json" \
                  --data "{ \"branch\": \"$REMOTE_BRANCH\", \"parameters\": { \"platform\": \"ios\", \"sdk-branch\": \"$CIRCLE_BRANCH\", \"triggering-pipeline-id\": \"<< pipeline.id >>\" }}" \
                | jq -r '.id'
                )
              }

              create_remote_pipeline
              
              if [ "$CREATED_PIPELINE_ID" = 'null' ]
              then
                REMOTE_BRANCH='main'
                create_remote_pipeline
              fi

              echo "Triggered spec pipeline $CREATED_PIPELINE_ID on branch $REMOTE_BRANCH"
              echo $CREATED_PIPELINE_ID > pipeline.txt
        - persist_to_workspace:
            root: .
            paths: 
              - pipeline.txt
  check-status-of-spec-test-pipeline:
    docker: 
      - image: cimg/base:current
    resource_class: small 
    steps:
      # checkout so the source files are here for the codecov upload
      - checkout
      - attach_workspace:
          at: workspace
      - run:
          name: Check triggered workflow status
          command: |
            triggered_pipeline_id=$(cat workspace/pipeline.txt)
            curl --request GET \
                --url "https://circleci.com/api/v2/pipeline/${triggered_pipeline_id}/workflow" \
                --header "Circle-Token: $CIRCLE_API_TOKEN" \
                --header "content-type: application/json" \
                --output pipeline.json
            created_workflow_status=$(jq -r '.items[0].status' pipeline.json)
            echo $created_workflow_status
            if [[ "$created_workflow_status" != "success" ]]; then
              echo "Workflow not successful - ${created_workflow_status}"
              (exit -1) 
            fi
            
            echo "Created workflow successful"
      - run:
          name: Get codecov report
          command: |
            triggered_workflow_id=$(jq -r '.items[0].id' pipeline.json)
            created_job_number=$(curl --request GET \
                --url "https://circleci.com/api/v2/workflow/${triggered_workflow_id}/job" \
                --header "Circle-Token: $CIRCLE_API_TOKEN" \
                --header "content-type: application/json" \
              | jq -r '.items[0].job_number'
            )
            cobertura_artifact_url=$(curl --request GET \
                --url "https://circleci.com/api/v2/project/github/appcues/appcues-mobile-experience-spec/${created_job_number}/artifacts" \
                --header "Circle-Token: $CIRCLE_API_TOKEN" \
                --header "content-type: application/json" \
              | jq -r '.items[] | select( .path == "fastlane/test_output/cobertura.xml" ).url'
            )
            curl -L "$cobertura_artifact_url?circle-token=$CIRCLE_API_TOKEN" --output cobertura.xml
      - codecov/upload:
          file: "cobertura.xml"
          token: CODECOV_TOKEN_APPCUES_IOS_SDK
      - slack/notify:
          event: fail
          template: basic_fail_1
          channel: team-mobile-bots

# -------------------------
#        WORKFLOWS
# -------------------------
workflows:
  version: 2
  branch_validation:
    when:
        not: << pipeline.parameters.deploy-beta >>
    jobs:
      - trigger-spec-test-pipeline:
          context:
            - Appcues
      - wait-for-spec-test-pipeline:
          type: approval
          requires: 
            - trigger-spec-test-pipeline
      - check-status-of-spec-test-pipeline:
          requires:
            - wait-for-spec-test-pipeline
          context:
            - Appcues
      - additional-branch-validation:
          context:
            - Appcues

  build_and_deploy:
    when: << pipeline.parameters.deploy-beta >>
    jobs:
      - deploy_example:
          context:
            - Appcues
